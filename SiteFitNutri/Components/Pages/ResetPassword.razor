@page "/reset-password"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using AppFitNutri.Core.Services.Login
@using Microsoft.AspNetCore.Components.Forms
@inject IApiHttp ApiHttp
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<EditForm Model="@resetPasswordModel" OnValidSubmit="RedefinirSenha" FormName="ResetPasswordForm">
    <AntiforgeryToken />
    <DataAnnotationsValidator />
    <div class="login-container">
        
        <!-- Logo -->
        <img src="/images/logofitnutri.png" class="logo" />

        <!-- Título -->
        <h2 class="titulo">Redefinir Senha</h2>
        <p class="subtitle">Digite sua nova senha</p>

        @if (!TokenValido)
        {
            <div class="error-container">
                <h3>⚠️ Link Inválido</h3>
                <p>Este link de redefinição de senha é inválido ou expirou.</p>
                <p>Por favor, solicite um novo link de redefinição.</p>
                <button type="button" class="btn" @onclick="IrParaEsqueciSenha">
                    Solicitar novo link
                </button>
            </div>
        }
        else
        {
            <!-- Nova Senha -->
            <InputText @bind-Value="resetPasswordModel.NewPassword"
                       placeholder="Nova senha"
                       class="input"
                       type="password" />
            <ValidationMessage For="() => resetPasswordModel.NewPassword" class="validation-message" />

            <!-- Confirmar Senha -->
            <InputText @bind-Value="resetPasswordModel.ConfirmPassword"
                       placeholder="Confirmar nova senha"
                       class="input"
                       type="password" />
            <ValidationMessage For="() => resetPasswordModel.ConfirmPassword" class="validation-message" />

            <!-- Requisitos da senha -->
            <div class="password-requirements">
                <p><strong>Requisitos da senha:</strong></p>
                <ul>
                    <li class="@(HasMinLength ? "valid" : "")">Mínimo 8 caracteres</li>
                    <li class="@(HasLowercase ? "valid" : "")">Pelo menos 1 letra minúscula</li>
                    <li class="@(HasUppercase ? "valid" : "")">Pelo menos 1 letra maiúscula</li>
                    <li class="@(HasNumber ? "valid" : "")">Pelo menos 1 número</li>
                    <li class="@(HasSpecialChar ? "valid" : "")">Pelo menos 1 caractere especial</li>
                    <li class="@(PasswordsMatch ? "valid" : "")">Senhas coincidem</li>
                </ul>
            </div>

            <!-- Mensagem de sucesso -->
            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <div class="success">
                    <p>@SuccessMessage</p>
                    <button type="button" class="btn" @onclick="IrParaLogin">
                        Fazer login
                    </button>
                </div>
            }

            <!-- Mensagem de erro -->
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <p class="erro">@ErrorMessage</p>
            }

            @if (string.IsNullOrEmpty(SuccessMessage))
            {
                <!-- Botão Redefinir -->
                <button type="submit" class="btn" disabled="@(IsBusy || !IsFormValid)">
                    @if (IsBusy)
                    {
                        <span>Redefinindo...</span>
                    }
                    else
                    {
                        <span>Redefinir senha</span>
                    }
                </button>
            }

            <!-- Voltar para login -->
            <button type="button" class="btn-link" @onclick="IrParaLogin">Voltar para o login
            </button>

            <!-- Loading -->
            @if (IsBusy)
            {
                <p>Redefinindo senha...</p>
            }
        }
    </div>
</EditForm>

<style>
    .subtitle {
        text-align: center;
        color: #666;
        margin: 10px 0 30px 0;
        font-size: 14px;
    }

    .success {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 15px;
        border-radius: 5px;
        margin: 15px 0;
        text-align: center;
    }

    .error-container {
        text-align: center;
        padding: 20px;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        border-radius: 5px;
        margin: 20px 0;
    }

    .validation-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
        display: block;
    }

    .password-requirements {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        padding: 15px;
        border-radius: 5px;
        margin: 15px 0;
        font-size: 13px;
    }

    .password-requirements ul {
        margin: 10px 0 0 0;
        padding-left: 20px;
    }

    .password-requirements li {
        margin: 5px 0;
        color: #dc3545;
    }

    .password-requirements li.valid {
        color: #28a745;
    }

    .password-requirements li.valid::before {
        content: "[OK] ";
        font-weight: bold;
    }

    .password-requirements li:not(.valid) {
        color: #dc3545;
    }

    .password-requirements li:not(.valid)::before {
        content: "[X] ";
        font-weight: bold;
    }
</style>

@code {
    private ResetPasswordModel resetPasswordModel = new();
    private bool IsBusy = false;
    private string? ErrorMessage;
    private string? SuccessMessage;
    private string? Token;
    private bool TokenValido = true;

    // Propriedades para validação visual da senha
    private bool HasMinLength => !string.IsNullOrEmpty(resetPasswordModel.NewPassword) && resetPasswordModel.NewPassword.Length >= 8;
    private bool HasLowercase => !string.IsNullOrEmpty(resetPasswordModel.NewPassword) && resetPasswordModel.NewPassword.Any(char.IsLower);
    private bool HasUppercase => !string.IsNullOrEmpty(resetPasswordModel.NewPassword) && resetPasswordModel.NewPassword.Any(char.IsUpper);
    private bool HasNumber => !string.IsNullOrEmpty(resetPasswordModel.NewPassword) && resetPasswordModel.NewPassword.Any(char.IsDigit);
    private bool HasSpecialChar => !string.IsNullOrEmpty(resetPasswordModel.NewPassword) && resetPasswordModel.NewPassword.Any(c => "!@#$%^&*()_+-=[]{}|;:,.<>?".Contains(c));
    private bool PasswordsMatch => !string.IsNullOrEmpty(resetPasswordModel.NewPassword) && !string.IsNullOrEmpty(resetPasswordModel.ConfirmPassword) && resetPasswordModel.NewPassword == resetPasswordModel.ConfirmPassword;
    
    private bool IsFormValid => HasMinLength && HasLowercase && HasUppercase && HasNumber && HasSpecialChar && PasswordsMatch;

    protected override async Task OnInitializedAsync()
    {
        // Extrair token da URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        
        if (query.TryGetValue("token", out var tokenValue))
        {
            Token = tokenValue.FirstOrDefault();
            TokenValido = !string.IsNullOrEmpty(Token);
        }
        else
        {
            TokenValido = false;
        }
    }

    private async Task RedefinirSenha()
    {
        if (IsBusy || string.IsNullOrEmpty(Token)) return;

        ErrorMessage = null;
        SuccessMessage = null;

        if (!IsFormValid)
        {
            ErrorMessage = "Por favor, preencha todos os campos corretamente.";
            return;
        }

        try
        {
            IsBusy = true;
            var result = await ApiHttp.ResetPasswordAsync(Token, resetPasswordModel.NewPassword!, CancellationToken.None);

            if (result.IsSuccessStatusCode)
            {
                SuccessMessage = "Senha redefinida com sucesso! Você já pode fazer login com sua nova senha.";
                resetPasswordModel = new(); // Limpa o formulário
            }
            else
            {
                var problem = await result.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                if (problem is not null && problem.TryGetValue("error", out var message) && !string.IsNullOrWhiteSpace(message))
                    ErrorMessage = message;
                else
                    ErrorMessage = "Erro ao redefinir senha. Tente novamente.";
            }
        }
        catch (TaskCanceledException)
        {
            ErrorMessage = "Tempo de resposta excedido. Tente novamente.";
        }
        catch (Exception)
        {
            ErrorMessage = "Erro inesperado. Verifique sua conexão.";
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void IrParaLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void IrParaEsqueciSenha()
    {
        NavigationManager.NavigateTo("/forgot-password");
    }

    public class ResetPasswordModel
    {
        [Required(ErrorMessage = "Nova senha é obrigatória")]
        [MinLength(8, ErrorMessage = "Senha deve ter pelo menos 8 caracteres")]
        public string? NewPassword { get; set; }

        [Required(ErrorMessage = "Confirmação de senha é obrigatória")]
        [Compare(nameof(NewPassword), ErrorMessage = "Senhas não coincidem")]
        public string? ConfirmPassword { get; set; }
    }
}