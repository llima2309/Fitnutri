@page "/admin/users/pending"
@rendermode InteractiveServer
@using SiteFitNutri.Models
@using SiteFitNutri.Services.Login
@inject IApiHttp Api
@inject IJSRuntime Js

<h3>Usuários</h3>

<div class="nav nav-tabs mb-3">
    <button class="nav-link @(activeTab == "pendentes" ? "active" : "")" @onclick='@(() => ChangeTab("pendentes"))'>
        Pendentes
    </button>
    <button class="nav-link @(activeTab == "aprovados" ? "active" : "")" @onclick='@(() => ChangeTab("aprovados"))'>
        Aprovados
    </button>
    <button class="nav-link @(activeTab == "rejeitados" ? "active" : "")" @onclick='@(() => ChangeTab("rejeitados"))'>
        Rejeitados
    </button>
</div>

@if (isBusy)
{
    <p>Carregando...</p>
}
else if (!string.IsNullOrEmpty(error))
{
    <p style="color:red">@error</p>
}
else if (users.Count == 0)
{
    <p>Nenhum usuário encontrado.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Usuário</th>
            <th>Email</th>
            <th>Criado em</th>
            <th>Email confirmado</th>
            <th>Status</th>
            <th style="width:280px">Ações</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var u in users)
        {
            var rowBusy = busyIds.Contains(u.Id);
            <tr>
                <td>@u.UserName</td>
                <td>@u.Email</td>
                <td>@u.CreatedAt.ToLocalTime():g</td>
                <td>@(u.EmailConfirmed ? "Sim" : "Não")</td>
                <td>@u.Status</td>
                <td>
                    <div style="display:flex; gap:8px; flex-wrap:wrap">
                        @if (activeTab == "pendentes")
                        {
                            <button class="btn btn-sm btn-success" disabled="@rowBusy"
                                    @onclick='() => ConfirmAndRun(u, ApproveAsync, $"Confirmar ACEITAR o usuário {u.UserName}?")'>
                                Aceitar
                            </button>
                            <button class="btn btn-sm btn-warning" disabled="@rowBusy"
                                    @onclick='() => ConfirmAndRun(u, RejectAsync, $"Confirmar REJEITAR o usuário {u.UserName}?")'>
                                Rejeitar
                            </button>
                            <button class="btn btn-sm btn-danger" disabled="@rowBusy"
                                    @onclick='() => ConfirmAndRun(u, DeleteAsync, $"Confirmar DELETAR o usuário {u.UserName}? Essa ação é irreversível.")'>
                                Deletar
                            </button>
                        }
                        else if (activeTab == "aprovados")
                        {
                            <button class="btn btn-sm btn-danger" disabled="@rowBusy"
                                    @onclick='() => ConfirmAndRun(u, DeleteAsync, $"Confirmar DELETAR o usuário {u.UserName}? Essa ação é irreversível.")'>
                                Deletar
                            </button>
                            <button class="btn btn-sm btn-success" disabled="@rowBusy"
                                    @onclick='() => ConfirmAndRun(u, ConfirmarEmailAsync, $"Confirmar email  do usuário {u.UserName}? Essa ação é irreversível.")'>
                                Confirmar Email
                            </button>
                        }
                        else if (activeTab == "rejeitados")
                        {
                            <button class="btn btn-sm btn-success" disabled="@rowBusy"
                                    @onclick='() => ConfirmAndRun(u, ApproveAsync, $"Confirmar ACEITAR o usuário {u.UserName}?")'>
                                Aprovar
                            </button>
                            <button class="btn btn-sm btn-danger" disabled="@rowBusy"
                                    @onclick='() => ConfirmAndRun(u, DeleteAsync, $"Confirmar DELETAR o usuário {u.UserName}? Essa ação é irreversível.")'>
                                Deletar
                            </button>
                        }
                        else
                        {
                            <span>-</span>
                        }
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <div style="display:flex; gap:8px">
        <button disabled="@(skip == 0 || isBusy)" @onclick="Prev">Anterior</button>
        <button disabled="@(users.Count < take || isBusy)" @onclick="Next">Próximo</button>
        <span style="align-self:center">Página @((skip / take) + 1)</span>
    </div>
}

@code {
    private readonly List<PendingUserDto> users = new();
    private readonly HashSet<Guid> busyIds = new();
    private bool isBusy;
    private string? error;
    private int skip = 0;
    private int take = 20;
    private string activeTab = "pendentes";

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task ChangeTab(string tab)
    {
        if (activeTab == tab) return;
        activeTab = tab;
        skip = 0;
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            isBusy = true;
            error = null;
            users.Clear();

            if (activeTab == "pendentes")
            {
                var data = await Api.GetPendingUsersAsync(skip, take);
                if (data is not null) users.AddRange(data);
            }
            else if (activeTab == "aprovados")
            {
                // Certifique-se que este método existe na interface IApiHttp
                var data = await Api.GetApprovedUsersAsync(skip, take);
                if (data is not null) users.AddRange(data);
            }
            else if (activeTab == "rejeitados")
            {
                // Certifique-se que este método existe na interface IApiHttp
                var data = await Api.GetRejectedUsersAsync(skip, take);
                if (data is not null) users.AddRange(data);
            }
        }
        catch (Exception ex)
        {
            error = $"Falha ao carregar: {ex.Message}";
        }
        finally
        {
            isBusy = false;
            StateHasChanged();
        }
    }

    private async Task Next()
    {
        if (users.Count < take) return;
        skip += take;
        await LoadAsync();
    }

    private async Task Prev()
    {
        if (skip == 0) return;
        skip = Math.Max(0, skip - take);
        await LoadAsync();
    }

    // ---- Ações de linha ----
    private async Task ConfirmAndRun(PendingUserDto u, Func<Guid, Task> action, string confirmMsg)
    {
        var ok = await Js.InvokeAsync<bool>("confirm", confirmMsg);
        if (!ok) return;

        try
        {
            busyIds.Add(u.Id);
            StateHasChanged();

            await action(u.Id);

            // UI otimista: remove da lista local
            var idx = users.FindIndex(x => x.Id == u.Id);
            if (idx >= 0) users.RemoveAt(idx);
        }
        catch (Exception ex)
        {
            error = $"Falha na ação para {u.UserName}: {ex.Message}";
            // opcional: recarregar para garantir consistência
            // await LoadAsync();
        }
        finally
        {
            busyIds.Remove(u.Id);
            StateHasChanged();
        }
    }

    private Task ApproveAsync(Guid userId) => Api.ApproveUserAsync(userId);
    private Task RejectAsync(Guid userId) => Api.RejectUserAsync(userId);
    private Task DeleteAsync(Guid userId) => Api.DeleteUserAsync(userId);
    private Task ConfirmarEmailAsync(Guid userId) => Api.ConfirmarEmailAsync(userId);

}
