@page "/forgot-password"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using SiteFitNutri.Services.Login
@using Microsoft.AspNetCore.Components.Forms
@inject IApiHttp ApiHttp
@inject NavigationManager NavigationManager

<EditForm Model="@forgotPasswordModel" OnValidSubmit="EnviarSolicitacao" FormName="ForgotPasswordForm">
    <AntiforgeryToken />
    <DataAnnotationsValidator />
    <div class="login-container">
        
        <!-- Logo -->
        <img src="/images/logofitnutri.png" class="logo" />

        <!-- T�tulo -->
        <h2 class="titulo">Recuperar Senha</h2>
        <p class="subtitle">Informe seu e-mail para receber as instru��es de recupera��o</p>

        <!-- E-mail -->
        <InputText @bind-Value="forgotPasswordModel.Email"
                   placeholder="Seu e-mail"
                   class="input" />
        <ValidationMessage For="() => forgotPasswordModel.Email" class="validation-message" />

        <!-- Mensagem de sucesso -->
        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="success">
                <p>@SuccessMessage</p>
            </div>
        }

        <!-- Mensagem de erro -->
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p class="erro">@ErrorMessage</p>
        }

        <!-- Bot�o Enviar -->
        <button type="submit" class="btn" disabled="@IsBusy">
            @if (IsBusy)
            {
                <span>Enviando...</span>
            }
            else
            {
                <span>Enviar instru��es</span>
            }
        </button>

        <!-- Voltar para login -->
        <button type="button" class="btn-link" @onclick="VoltarParaLogin">
            ? Voltar para o login
        </button>

        <!-- Loading -->
        @if (IsBusy)
        {
            <p>Enviando solicita��o...</p>
        }
    </div>
</EditForm>

<style>
    .subtitle {
        text-align: center;
        color: #666;
        margin: 10px 0 30px 0;
        font-size: 14px;
    }

    .success {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 15px;
        border-radius: 5px;
        margin: 15px 0;
        text-align: center;
    }

    .validation-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
        display: block;
    }
</style>

@code {
    private ForgotPasswordModel forgotPasswordModel = new();
    private bool IsBusy = false;
    private string? ErrorMessage;
    private string? SuccessMessage;

    private async Task EnviarSolicitacao()
    {
        if (IsBusy) return;

        ErrorMessage = null;
        SuccessMessage = null;

        var email = (forgotPasswordModel.Email ?? "").Trim();

        if (string.IsNullOrWhiteSpace(email))
        {
            ErrorMessage = "Informe um e-mail v�lido.";
            return;
        }

        try
        {
            IsBusy = true;
            var result = await ApiHttp.ForgotPasswordAsync(email, CancellationToken.None);

            if (result.IsSuccessStatusCode)
            {
                var content = await result.Content.ReadFromJsonAsync<ForgotPasswordResponse>();
                if (content != null)
                {
                    SuccessMessage = content.Message;
                    forgotPasswordModel.Email = ""; // Limpa o campo
                }
                else
                {
                    SuccessMessage = "Se o e-mail existir em nossa base, voc� receber� instru��es para redefinir sua senha.";
                }
            }
            else
            {
                var problem = await result.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                if (problem is not null && problem.TryGetValue("error", out var message) && !string.IsNullOrWhiteSpace(message))
                    ErrorMessage = message;
                else
                    ErrorMessage = "Erro ao processar solicita��o. Tente novamente.";
            }
        }
        catch (TaskCanceledException)
        {
            ErrorMessage = "Tempo de resposta excedido. Tente novamente.";
        }
        catch (Exception)
        {
            ErrorMessage = "Erro inesperado. Verifique sua conex�o.";
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void VoltarParaLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    public class ForgotPasswordModel
    {
        [Required(ErrorMessage = "E-mail � obrigat�rio")]
        [EmailAddress(ErrorMessage = "Digite um e-mail v�lido")]
        public string? Email { get; set; }
    }

    public class ForgotPasswordResponse
    {
        public string Message { get; set; } = "";
    }
}